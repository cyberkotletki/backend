package main

import (
	abiDescription "backend/internal/abi"
	"backend/internal/delivery"
	"backend/internal/repo/mongodb"
	redisrepo "backend/internal/repo/redis"
	"backend/internal/repo/s3"
	"backend/internal/usecase/service"
	"backend/pkg/jwt"
	"context"
	"errors"
	"fmt"
	"github.com/redis/go-redis/v9"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
	consulapi "github.com/hashicorp/consul/api"
	vaultapi "github.com/hashicorp/vault/api"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/minio/minio-go/v7"
	"github.com/minio/minio-go/v7/pkg/credentials"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type Config struct {
	// Server
	ServerPort string

	// MongoDB
	MongoURL      string
	MongoDatabase string

	// MinIO (S3)
	MinIOEndpoint  string
	MinIOAccessKey string
	MinIOSecretKey string
	MinIOBucket    string
	MinIOUseSSL    bool

	// Polygon Blockchain
	PolygonRPCURL   string
	ChainID         int64
	ContractAddress string
	PrivateKey      string
	PollInterval    time.Duration

	// Static files
	StaticBaseURL string

	// Telegram Bot
	TelegramBotToken string

	// Redis
	RedisAddr     string
	RedisPassword string

	// CORS
	AllowedOrigins []string
}

func main() {
	ctx := context.Background()

	log.Println("üöÄ –ó–∞–ø—É—Å–∫ Donly Gateway...")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Consul
	consulClient, err := initConsul()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Consul: %v", err)
	}
	log.Println("‚úÖ Consul –ø–æ–¥–∫–ª—é—á–µ–Ω")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vault
	vaultClient, err := initVault()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Vault: %v", err)
	}
	log.Println("‚úÖ Vault –ø–æ–¥–∫–ª—é—á–µ–Ω")

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ Vault
	config, err := loadConfigFromVault(vaultClient)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}
	log.Println("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ Vault")

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
	mongoClient, err := initMongoDB(ctx, config.MongoURL)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: %v", err)
	}
	defer func() {
		if err := mongoClient.Disconnect(ctx); err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç MongoDB: %v", err)
		}
	}()
	log.Println("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MinIO
	_, err = initMinIO(config)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MinIO: %v", err)
	}
	log.Println("‚úÖ MinIO –ø–æ–¥–∫–ª—é—á–µ–Ω")

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–æ–∫—á–µ–π–Ω—É
	polygonClient, contractABI, contractAddr, err := initPolygon(config)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Polygon: %v", err)
	}
	log.Printf("‚úÖ Polygon –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ç–∏ Chain UUID: %d", config.ChainID)
	log.Printf("üìã –ö–æ–Ω—Ç—Ä–∞–∫—Ç: %s", contractAddr.Hex())

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
	db := mongoClient.Database(config.MongoDatabase)

	userRepo := mongodb.NewUserRepository(db)
	wishRepo := mongodb.NewWishRepository(db)
	historyRepo := mongodb.NewHistoryRepository(db)
	blockchainRepo := mongodb.NewBlockchainRepository(db)
	minioConfig := s3.Config{
		Endpoint:        config.MinIOEndpoint,
		AccessKeyID:     config.MinIOAccessKey,
		SecretAccessKey: config.MinIOSecretKey,
		BucketName:      config.MinIOBucket,
	}
	fileStorage, err := s3.NewFileStorage(minioConfig)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ S3 —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: %v", err)
	}
	staticRepo := mongodb.NewStaticFileRepository(db)

	// --- Redis –¥–ª—è Donation Events ---
	redisClient := redis.NewClient(&redis.Options{
		Addr:     config.RedisAddr,
		Password: config.RedisPassword,
		DB:       0,
	})
	donationEventRepo := redisrepo.NewDonationEventRepo(redisClient, "donation_events")
	donationEventUC := service.NewDonationEventUsecase(donationEventRepo)
	donationEventHandler := delivery.NewDonationEventSSEHandler(donationEventUC)

	log.Println("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JWT —Å–µ—Ä–≤–∏—Å–∞
	jwtService := jwt.New("mega-secret-key") // TODO: –≤–∑—è—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ (usecase —Å–ª–æ–π)
	userService := service.NewUserService(userRepo, historyRepo, staticRepo, config.StaticBaseURL)
	wishService := service.NewWishService(wishRepo, staticRepo, userRepo, blockchainRepo, config.StaticBaseURL, polygonClient, contractAddr, contractABI)
	staticService := service.NewStaticService(staticRepo, fileStorage)

	log.Println("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è handlers (delivery —Å–ª–æ–π)
	userHandler := delivery.NewUserHandler(userService, jwtService, config.TelegramBotToken)
	wishHandler := delivery.NewWishlistHandler(wishService)
	staticHandler := delivery.NewStaticHandler(staticService)

	log.Println("‚úÖ Handlers –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

	// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–ª–æ–∫—á–µ–π–Ω–∞
	go func() {
		if err := wishService.StartBlockchainMonitoring(ctx); err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–ª–æ–∫—á–µ–π–Ω–∞: %v", err)
		}
	}()
	log.Println("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫—á–µ–π–Ω–∞ –∑–∞–ø—É—â–µ–Ω")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
	e := echo.New()

	// Middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOrigins:     config.AllowedOrigins,
		AllowCredentials: true,
		AllowMethods:     []string{echo.GET, echo.POST, echo.PUT, echo.DELETE, echo.OPTIONS},
		AllowHeaders:     []string{echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept, echo.HeaderAuthorization, "X-Requested-With"},
	}))

	// JWT middleware
	jwtMiddleware := delivery.NewJWTMiddleware(jwtService)

	// –ì—Ä—É–ø–ø–∞ /api
	api := e.Group("/api")

	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã Configure
	userHandler.Configure(api, jwtMiddleware)
	wishHandler.Configure(api, jwtMiddleware)
	staticHandler.Configure(api, jwtMiddleware)

	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SSE endpoint –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤
	donationEventHandler.Configure(api)

	// Health check –¥–ª—è Consul
	e.GET("/health", func(c echo.Context) error {
		return c.JSON(http.StatusOK, map[string]string{
			"status":  "ok",
			"service": "donly-gateway",
		})
	})

	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤ Consul
	if err := registerServiceInConsul(consulClient, config.ServerPort); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Consul: %v", err)
	}

	// 13. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	go func() {
		log.Printf("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", config.ServerPort)
		if err := e.Start(":" + config.ServerPort); err != nil && !errors.Is(err, http.ErrServerClosed) {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt, syscall.SIGTERM)
	<-quit

	log.Println("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")

	// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–ª–æ–∫—á–µ–π–Ω–∞
	wishService.StopBlockchainMonitoring()

	// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := e.Shutdown(ctx); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}

	log.Println("üëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// initConsul –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Consul
func initConsul() (*consulapi.Client, error) {
	config := consulapi.DefaultConfig()

	// –î–ª—è Docker Compose
	if consulAddr := os.Getenv("CONSUL_ADDR"); consulAddr != "" {
		config.Address = consulAddr
	} else {
		config.Address = "localhost:8500" // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	return consulapi.NewClient(config)
}

// initVault –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Vault
func initVault() (*vaultapi.Client, error) {
	config := vaultapi.DefaultConfig()

	// –î–ª—è Docker Compose
	if vaultAddr := os.Getenv("VAULT_ADDR"); vaultAddr != "" {
		config.Address = vaultAddr
	} else {
		config.Address = "http://localhost:8200" // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	client, err := vaultapi.NewClient(config)
	if err != nil {
		return nil, err
	}

	// –¢–æ–∫–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	if token := os.Getenv("VAULT_TOKEN"); token != "" {
		client.SetToken(token)
	} else {
		client.SetToken("myroot") // —Ç–æ–∫–µ–Ω –∏–∑ docker-compose
	}

	return client, nil
}

// loadConfigFromVault –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ Vault
func loadConfigFromVault(client *vaultapi.Client) (*Config, error) {
	config := &Config{}

	// –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Vault, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	secret, err := client.Logical().Read("secret/data/donly")
	if err != nil || secret == nil {
		log.Println("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Vault, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
		return loadConfigFromEnv(), nil
	}

	data := secret.Data["data"].(map[string]interface{})

	config.ServerPort = getStringFromVault(data, "server_port", "8080")
	config.MongoURL = getStringFromVault(data, "mongo_url", "mongodb://localhost:27017")
	config.MongoDatabase = getStringFromVault(data, "mongo_database", "donly")

	config.MinIOEndpoint = getStringFromVault(data, "minio_endpoint", "localhost:9000")
	config.MinIOAccessKey = getStringFromVault(data, "minio_access_key", "minioadmin")
	config.MinIOSecretKey = getStringFromVault(data, "minio_secret_key", "minioadmin")
	config.MinIOBucket = getStringFromVault(data, "minio_bucket", "donly-static")
	config.MinIOUseSSL = false

	// Polygon Amoy testnet –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
	config.PolygonRPCURL = getStringFromVault(data, "polygon_rpc_url", "https://rpc-amoy.polygon.technology")
	config.ChainID = 80002 // Polygon Amoy testnet
	config.ContractAddress = getStringFromVault(data, "contract_address", "")
	config.PrivateKey = getStringFromVault(data, "private_key", "")

	pollInterval := getStringFromVault(data, "poll_interval", "15s")
	if duration, err := time.ParseDuration(pollInterval); err == nil {
		config.PollInterval = duration
	} else {
		config.PollInterval = 15 * time.Second
	}

	config.StaticBaseURL = getStringFromVault(data, "static_base_url", "http://localhost:8080")
	config.TelegramBotToken = getStringFromVault(data, "telegram_bot_token", "")

	// Redis
	config.RedisAddr = getStringFromVault(data, "redis_addr", "localhost:6379")
	config.RedisPassword = getStringFromVault(data, "redis_password", "")

	// CORS
	if origins, ok := data["allowed_origins"]; ok {
		if arr, ok := origins.([]interface{}); ok {
			for _, v := range arr {
				if s, ok := v.(string); ok {
					config.AllowedOrigins = append(config.AllowedOrigins, s)
				}
			}
		}
	}
	if len(config.AllowedOrigins) == 0 {
		config.AllowedOrigins = []string{"*"}
	}

	return config, nil
}

// loadConfigFromEnv –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (fallback)
func loadConfigFromEnv() *Config {
	return &Config{
		ServerPort:       getEnv("SERVER_PORT", "8080"),
		MongoURL:         getEnv("MONGO_URL", "mongodb://admin:password@localhost:27017"),
		MongoDatabase:    getEnv("MONGO_DATABASE", "donly"),
		MinIOEndpoint:    getEnv("MINIO_ENDPOINT", "localhost:9000"),
		MinIOAccessKey:   getEnv("MINIO_ACCESS_KEY", "minioadmin"),
		MinIOSecretKey:   getEnv("MINIO_SECRET_KEY", "minioadmin123"),
		MinIOBucket:      getEnv("MINIO_BUCKET", "donly-static"),
		MinIOUseSSL:      false,
		PolygonRPCURL:    getEnv("POLYGON_RPC_URL", "https://rpc-amoy.polygon.technology"), // Polygon Amoy testnet
		ChainID:          80002,                                                            // Polygon Amoy testnet Chain UUID
		ContractAddress:  getEnv("CONTRACT_ADDRESS", ""),
		PrivateKey:       getEnv("PRIVATE_KEY", ""),
		PollInterval:     15 * time.Second,
		StaticBaseURL:    getEnv("STATIC_BASE_URL", "http://localhost:8080"),
		TelegramBotToken: getEnv("TELEGRAM_BOT_TOKEN", ""),
		RedisAddr:        getEnv("REDIS_ADDR", "localhost:6379"),
		RedisPassword:    getEnv("REDIS_PASSWORD", ""),
		AllowedOrigins:   []string{"*"},
	}
}

// initMongoDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
func initMongoDB(ctx context.Context, mongoURL string) (*mongo.Client, error) {
	clientOptions := options.Client().ApplyURI(mongoURL)

	client, err := mongo.Connect(ctx, clientOptions)
	if err != nil {
		return nil, err
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	if err := client.Ping(ctx, nil); err != nil {
		return nil, err
	}

	return client, nil
}

// initMinIO –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MinIO
func initMinIO(config *Config) (*minio.Client, error) {
	client, err := minio.New(config.MinIOEndpoint, &minio.Options{
		Creds:  credentials.NewStaticV4(config.MinIOAccessKey, config.MinIOSecretKey, ""),
		Secure: config.MinIOUseSSL,
	})
	if err != nil {
		return nil, err
	}

	// –°–æ–∑–¥–∞–µ–º bucket –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	ctx := context.Background()
	exists, err := client.BucketExists(ctx, config.MinIOBucket)
	if err != nil {
		return nil, err
	}

	if !exists {
		err = client.MakeBucket(ctx, config.MinIOBucket, minio.MakeBucketOptions{})
		if err != nil {
			return nil, err
		}
		log.Printf("‚úÖ Bucket '%s' —Å–æ–∑–¥–∞–Ω", config.MinIOBucket)
	}

	return client, nil
}

// initPolygon –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Polygon –±–ª–æ–∫—á–µ–π–Ω—É
func initPolygon(config *Config) (*ethclient.Client, abi.ABI, common.Address, error) {
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Polygon RPC
	client, err := ethclient.Dial(config.PolygonRPCURL)
	if err != nil {
		return nil, abi.ABI{}, common.Address{}, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Polygon RPC: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	_, err = client.ChainID(ctx)
	if err != nil {
		return nil, abi.ABI{}, common.Address{}, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Chain UUID: %w", err)
	}

	/*
		if chainID.Int64() != config.ChainID {
			return nil, abi.ABI{}, common.Address{}, fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π Chain UUID: –ø–æ–ª—É—á–µ–Ω %d, –æ–∂–∏–¥–∞–ª—Å—è %d", chainID.Int64(), config.ChainID)
		}
	*/

	// –ó–∞–≥—Ä—É–∑–∫–∞ ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
	contractABI, err := abi.JSON(strings.NewReader(abiDescription.DonatesABI))
	if err != nil {
		return nil, abi.ABI{}, common.Address{}, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ABI: %w", err)
	}

	// –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
	if config.ContractAddress == "" {
		log.Println("‚ö†Ô∏è –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫—á–µ–π–Ω–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
		return client, contractABI, common.Address{}, nil
	}

	contractAddr := common.HexToAddress(config.ContractAddress)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
	code, err := client.CodeAt(ctx, contractAddr, nil)
	if err != nil {
		return nil, abi.ABI{}, common.Address{}, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: %w", err)
	}

	if len(code) == 0 {
		log.Printf("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ –∞–¥—Ä–µ—Å—É %s –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–¥–µ–ø–ª–æ–µ–Ω", contractAddr.Hex())
	} else {
		log.Printf("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É %s", contractAddr.Hex())
	}

	return client, contractABI, contractAddr, nil
}

// registerServiceInConsul —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –≤ Consul
func registerServiceInConsul(client *consulapi.Client, port string) error {
	registration := &consulapi.AgentServiceRegistration{
		ID:      "donly-gateway",
		Name:    "donly-gateway",
		Port:    parsePort(port),
		Address: "localhost",
		Check: &consulapi.AgentServiceCheck{
			HTTP:                           fmt.Sprintf("http://localhost:%s/health", port),
			Interval:                       "10s",
			Timeout:                        "5s",
			DeregisterCriticalServiceAfter: "30s",
		},
	}

	return client.Agent().ServiceRegister(registration)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

func getStringFromVault(data map[string]interface{}, key, defaultValue string) string {
	if value, exists := data[key]; exists {
		if str, ok := value.(string); ok {
			return str
		}
	}
	return defaultValue
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

func parsePort(port string) int {
	if port == "8080" {
		return 8080
	}
	return 8080
}
